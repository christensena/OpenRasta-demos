#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bookmarking.Domain
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="BookmarkStore")]
	public partial class BookmarkStoreDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBookmark(Bookmark instance);
    partial void UpdateBookmark(Bookmark instance);
    partial void DeleteBookmark(Bookmark instance);
    partial void InsertUserBookmarkTag(UserBookmarkTag instance);
    partial void UpdateUserBookmarkTag(UserBookmarkTag instance);
    partial void DeleteUserBookmarkTag(UserBookmarkTag instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserBookmark(UserBookmark instance);
    partial void UpdateUserBookmark(UserBookmark instance);
    partial void DeleteUserBookmark(UserBookmark instance);
    #endregion
		
		public BookmarkStoreDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BookmarkStoreConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BookmarkStoreDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookmarkStoreDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookmarkStoreDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookmarkStoreDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bookmark> Bookmarks
		{
			get
			{
				return this.GetTable<Bookmark>();
			}
		}
		
		public System.Data.Linq.Table<UserBookmarkTag> UserBookmarkTags
		{
			get
			{
				return this.GetTable<UserBookmarkTag>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserBookmark> UserBookmarks
		{
			get
			{
				return this.GetTable<UserBookmark>();
			}
		}
	}
	
	[Table(Name="dbo.Bookmark")]
	public partial class Bookmark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookmarkId;
		
		private string _Url;
		
		private string _Title;
		
		private EntitySet<UserBookmark> _UserBookmarks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookmarkIdChanging(int value);
    partial void OnBookmarkIdChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Bookmark()
		{
			this._UserBookmarks = new EntitySet<UserBookmark>(new Action<UserBookmark>(this.attach_UserBookmarks), new Action<UserBookmark>(this.detach_UserBookmarks));
			OnCreated();
		}
		
		[Column(Storage="_BookmarkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookmarkId
		{
			get
			{
				return this._BookmarkId;
			}
			set
			{
				if ((this._BookmarkId != value))
				{
					this.OnBookmarkIdChanging(value);
					this.SendPropertyChanging();
					this._BookmarkId = value;
					this.SendPropertyChanged("BookmarkId");
					this.OnBookmarkIdChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(2048) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(2048) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="Bookmark_UserBookmark", Storage="_UserBookmarks", ThisKey="BookmarkId", OtherKey="BookmarkId")]
		public EntitySet<UserBookmark> UserBookmarks
		{
			get
			{
				return this._UserBookmarks;
			}
			set
			{
				this._UserBookmarks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserBookmarks(UserBookmark entity)
		{
			this.SendPropertyChanging();
			entity.Bookmark = this;
		}
		
		private void detach_UserBookmarks(UserBookmark entity)
		{
			this.SendPropertyChanging();
			entity.Bookmark = null;
		}
	}
	
	[Table(Name="dbo.UserBookmarkTag")]
	public partial class UserBookmarkTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserBookmarkId;
		
		private string _Tag;
		
		private EntityRef<UserBookmark> _UserBookmark;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserBookmarkIdChanging(int value);
    partial void OnUserBookmarkIdChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    #endregion
		
		public UserBookmarkTag()
		{
			this._UserBookmark = default(EntityRef<UserBookmark>);
			OnCreated();
		}
		
		[Column(Storage="_UserBookmarkId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserBookmarkId
		{
			get
			{
				return this._UserBookmarkId;
			}
			set
			{
				if ((this._UserBookmarkId != value))
				{
					if (this._UserBookmark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserBookmarkIdChanging(value);
					this.SendPropertyChanging();
					this._UserBookmarkId = value;
					this.SendPropertyChanged("UserBookmarkId");
					this.OnUserBookmarkIdChanged();
				}
			}
		}
		
		[Column(Storage="_Tag", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[Association(Name="UserBookmark_UserBookmarkTag", Storage="_UserBookmark", ThisKey="UserBookmarkId", OtherKey="UserBookmarkId", IsForeignKey=true)]
		public UserBookmark UserBookmark
		{
			get
			{
				return this._UserBookmark.Entity;
			}
			set
			{
				UserBookmark previousValue = this._UserBookmark.Entity;
				if (((previousValue != value) 
							|| (this._UserBookmark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserBookmark.Entity = null;
						previousValue.UserBookmarkTags.Remove(this);
					}
					this._UserBookmark.Entity = value;
					if ((value != null))
					{
						value.UserBookmarkTags.Add(this);
						this._UserBookmarkId = value.UserBookmarkId;
					}
					else
					{
						this._UserBookmarkId = default(int);
					}
					this.SendPropertyChanged("UserBookmark");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Username;
		
		private string _DisplayName;
		
		private string _EmailAddress;
		
		private EntitySet<UserBookmark> _UserBookmarks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    #endregion
		
		public User()
		{
			this._UserBookmarks = new EntitySet<UserBookmark>(new Action<UserBookmark>(this.attach_UserBookmarks), new Action<UserBookmark>(this.detach_UserBookmarks));
			OnCreated();
		}
		
		[Column(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_EmailAddress", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[Association(Name="User_UserBookmark", Storage="_UserBookmarks", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserBookmark> UserBookmarks
		{
			get
			{
				return this._UserBookmarks;
			}
			set
			{
				this._UserBookmarks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserBookmarks(UserBookmark entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserBookmarks(UserBookmark entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.UserBookmark")]
	public partial class UserBookmark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserBookmarkId;
		
		private int _UserId;
		
		private int _BookmarkId;
		
		private string _CustomTitle;
		
		private EntitySet<UserBookmarkTag> _UserBookmarkTags;
		
		private EntityRef<Bookmark> _Bookmark;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserBookmarkIdChanging(int value);
    partial void OnUserBookmarkIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnBookmarkIdChanging(int value);
    partial void OnBookmarkIdChanged();
    partial void OnCustomTitleChanging(string value);
    partial void OnCustomTitleChanged();
    #endregion
		
		public UserBookmark()
		{
			this._UserBookmarkTags = new EntitySet<UserBookmarkTag>(new Action<UserBookmarkTag>(this.attach_UserBookmarkTags), new Action<UserBookmarkTag>(this.detach_UserBookmarkTags));
			this._Bookmark = default(EntityRef<Bookmark>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserBookmarkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserBookmarkId
		{
			get
			{
				return this._UserBookmarkId;
			}
			set
			{
				if ((this._UserBookmarkId != value))
				{
					this.OnUserBookmarkIdChanging(value);
					this.SendPropertyChanging();
					this._UserBookmarkId = value;
					this.SendPropertyChanged("UserBookmarkId");
					this.OnUserBookmarkIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_BookmarkId", DbType="Int NOT NULL")]
		public int BookmarkId
		{
			get
			{
				return this._BookmarkId;
			}
			set
			{
				if ((this._BookmarkId != value))
				{
					if (this._Bookmark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookmarkIdChanging(value);
					this.SendPropertyChanging();
					this._BookmarkId = value;
					this.SendPropertyChanged("BookmarkId");
					this.OnBookmarkIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomTitle", DbType="NVarChar(2048)")]
		public string CustomTitle
		{
			get
			{
				return this._CustomTitle;
			}
			set
			{
				if ((this._CustomTitle != value))
				{
					this.OnCustomTitleChanging(value);
					this.SendPropertyChanging();
					this._CustomTitle = value;
					this.SendPropertyChanged("CustomTitle");
					this.OnCustomTitleChanged();
				}
			}
		}
		
		[Association(Name="UserBookmark_UserBookmarkTag", Storage="_UserBookmarkTags", ThisKey="UserBookmarkId", OtherKey="UserBookmarkId")]
		public EntitySet<UserBookmarkTag> UserBookmarkTags
		{
			get
			{
				return this._UserBookmarkTags;
			}
			set
			{
				this._UserBookmarkTags.Assign(value);
			}
		}
		
		[Association(Name="Bookmark_UserBookmark", Storage="_Bookmark", ThisKey="BookmarkId", OtherKey="BookmarkId", IsForeignKey=true)]
		public Bookmark Bookmark
		{
			get
			{
				return this._Bookmark.Entity;
			}
			set
			{
				Bookmark previousValue = this._Bookmark.Entity;
				if (((previousValue != value) 
							|| (this._Bookmark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bookmark.Entity = null;
						previousValue.UserBookmarks.Remove(this);
					}
					this._Bookmark.Entity = value;
					if ((value != null))
					{
						value.UserBookmarks.Add(this);
						this._BookmarkId = value.BookmarkId;
					}
					else
					{
						this._BookmarkId = default(int);
					}
					this.SendPropertyChanged("Bookmark");
				}
			}
		}
		
		[Association(Name="User_UserBookmark", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserBookmarks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserBookmarks.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserBookmarkTags(UserBookmarkTag entity)
		{
			this.SendPropertyChanging();
			entity.UserBookmark = this;
		}
		
		private void detach_UserBookmarkTags(UserBookmarkTag entity)
		{
			this.SendPropertyChanging();
			entity.UserBookmark = null;
		}
	}
}
#pragma warning restore 1591
